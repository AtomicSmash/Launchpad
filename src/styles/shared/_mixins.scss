@use "sass:string";
@use "sass:math";
@use "sass:map";
@use "sass:meta";

/* stylelint-disable at-rule-empty-line-before -- Shouldn't apply to scss if statements */
/* stylelint-disable order/order -- Order of properties in functions matters */

///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
	@if meta.type-of($value) == "number" {
		@return $value;
	} @else if meta.type-of($value) != "string" {
		@error 'Value for `to-number` should be a number or a string.';
	}

	$result: 0;
	$digits: 0;
	$minus: string.slice($value, 1, 1) == "-";
	$numbers: (
		"0": 0,
		"1": 1,
		"2": 2,
		"3": 3,
		"4": 4,
		"5": 5,
		"6": 6,
		"7": 7,
		"8": 8,
		"9": 9,
	);

	@for $i from if($minus, 2, 1) through string.length($value) {
		$character: string.slice($value, $i, $i);

		@if not(map.has-key($numbers, $character) or $character == ".") {
			@return to-length(
				if($minus, -$result, $result),
				string.slice($value, $i)
			);
		}

		@if $character == "." {
			$digits: 1;
		} @else if $digits == 0 {
			$result: $result * 10 + map.get($numbers, $character);
		} @else {
			$digits: $digits * 10;
			$result: $result + math.div(map.get($numbers, $character), $digits);
		}
	}

	@return if($minus, -$result, $result);
}

///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function add-unit($value, $unit) {
	$units: (
		"px": 1px,
		"cm": 1cm,
		"mm": 1mm,
		"%": 1%,
		"ch": 1ch,
		"pc": 1pc,
		"in": 1in,
		"em": 1em,
		"rem": 1rem,
		"pt": 1pt,
		"ex": 1ex,
		"vw": 1vw,
		"vh": 1vh,
		"vmin": 1vmin,
		"vmax": 1vmax,
	);

	@if not map.has-key($units, $unit) {
		@error "Invalid unit `#{$unit}`.";
	}

	@return $value * map.get($units, $unit);
}

///
/// Calculate fluid size of an element on a line
/// Calculation taken from https://fluidtypography.com/
///
/// @param {String} $scale-from-size - The minimum value
/// @param {String} $scale-to-size - The maximum value
///
/// @return - A clamp css function
@function fluid-size($scale-from-size, $scale-to-size) {
	@if math.unit($scale-from-size) == "px" {
		$scale-from-size: to-number(string.slice("#{$scale-from-size}", 0, -3));
	} @else if math.unit($scale-from-size) == "rem" {
		$scale-from-size: to-number(string.slice("#{$scale-from-size}", 0, -4)) *
			16;
	} @else if $scale-from-size == 0 {
		$scale-from-size: 0;
	} @else {
		@error "Unknown unit passed into fluid-size in min parameter: #{math.unit($scale-from-size)}. Please use px or rem.";
	}

	@if math.unit($scale-to-size) == "px" {
		$scale-to-size: to-number(string.slice("#{$scale-to-size}", 0, -3));
	} @else if math.unit($scale-to-size) == "rem" {
		$scale-to-size: to-number(string.slice("#{$scale-to-size}", 0, -4)) * 16;
	} @else if $scale-to-size == 0 {
		$scale-to-size: 0;
	} @else {
		@error "Unknown unit passed into fluid-size in max parameter: #{math.unit($scale-to-size)}. Please use px or rem.";
	}

	$min-size: $scale-from-size;
	$max-size: $scale-to-size;

	@if $scale-from-size == $scale-to-size {
		@return add-unit(math.div($scale-from-size, 16), "rem");
	}

	@if $scale-from-size > $scale-to-size {
		$min-size: $scale-to-size;
		$max-size: $scale-from-size;
	}

	$min-viewport-width: 375; // unitless px
	$max-viewport-width: 1140; // unitless px

	/* m = (y2 - y1) / (x2 - x1)  */
	$rise: $scale-to-size - $scale-from-size;
	$run: $max-viewport-width - $min-viewport-width;
	$slope: math.div($rise, $run);

	@return clamp(
		add-unit(math.div($min-size, 16), "rem"),
		calc(
			$slope * (100vw - add-unit(math.div($min-viewport-width, 16), "rem")) +
				add-unit(math.div($scale-from-size, 16), "rem")
		),
		add-unit(math.div($max-size, 16), "rem")
	);
}

@mixin typography-style-t-1 {
	font-size: var(--typography-t-1-font-size);
	line-height: var(--typography-t-1-line-height);
	letter-spacing: var(--typography-t-1-letter-spacing);
	font-weight: var(--typography-t-1-font-weight);
	color: var(--wp--preset--color--t-1);
	font-family: var(--typography-t-1-font-family);
}

@mixin typography-style-t-2 {
	font-size: var(--typography-t-2-font-size);
	line-height: var(--typography-t-2-line-height);
	letter-spacing: var(--typography-t-2-letter-spacing);
	font-weight: var(--typography-t-2-font-weight);
	color: var(--wp--preset--color--t-2);
	font-family: var(--typography-t-2-font-family);
}

@mixin typography-style-t-3 {
	font-size: var(--typography-t-3-font-size);
	line-height: var(--typography-t-3-line-height);
	letter-spacing: var(--typography-t-3-letter-spacing);
	font-weight: var(--typography-t-3-font-weight);
	color: var(--wp--preset--color--t-3);
	font-family: var(--typography-t-3-font-family);
}

@mixin typography-style-t-4 {
	font-size: var(--typography-t-4-font-size);
	line-height: var(--typography-t-4-line-height);
	letter-spacing: var(--typography-t-4-letter-spacing);
	font-weight: var(--typography-t-4-font-weight);
	color: var(--wp--preset--color--t-4);
	font-family: var(--typography-t-4-font-family);
}

@mixin typography-style-t-5 {
	font-size: var(--typography-t-5-font-size);
	line-height: var(--typography-t-5-line-height);
	letter-spacing: var(--typography-t-5-letter-spacing);
	font-weight: var(--typography-t-5-font-weight);
	color: var(--wp--preset--color--t-5);
	font-family: var(--typography-t-5-font-family);
}

@mixin typography-style-t-6 {
	font-size: var(--typography-t-6-font-size);
	line-height: var(--typography-t-6-line-height);
	letter-spacing: var(--typography-t-6-letter-spacing);
	font-weight: var(--typography-t-6-font-weight);
	color: var(--wp--preset--color--t-6);
	font-family: var(--typography-t-6-font-family);
}

@mixin typography-style-body {
	font-size: var(--typography-body-font-size);
	line-height: var(--typography-body-line-height);
	letter-spacing: var(--typography-body-letter-spacing);
	font-weight: var(--typography-body-font-weight);
	color: var(--wp--preset--color--body);
	font-family: var(--typography-body-font-family);
}

@mixin typography-style-body-large {
	font-size: var(--typography-body-large-font-size);
	line-height: var(--typography-body-large-line-height);
	letter-spacing: var(--typography-body-large-letter-spacing);
	font-weight: var(--typography-body-large-font-weight);
	color: var(--wp--preset--color--body-large);
	font-family: var(--typography-body-large-font-family);
}

@mixin typography-style-eyebrow {
	font-size: var(--typography-eyebrow-font-size);
	line-height: var(--typography-eyebrow-line-height);
	letter-spacing: var(--typography-eyebrow-letter-spacing);
	font-weight: var(--typography-eyebrow-font-weight);
	color: var(--wp--preset--color--eyebrow);
	font-family: var(--typography-eyebrow-font-family);
}
